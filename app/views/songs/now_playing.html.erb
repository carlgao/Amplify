
<script type="text/javascript">
var nr = 0;	// needle rotation angle
var ratingView = function() {
	var canvas = document.getElementById("paper");
	var context = canvas.getContext("2d");
	var width = 320;
	var height = 480;

	canvas.width = width;
	canvas.height = height;

	var backgroundImg = new Image();
	backgroundImg.onload = function() {};
	backgroundImg.src = "/images/background.png";

	var ratingWheelImg = new Image();
	ratingWheelImg.src = "/images/vinyl.png";

	var ratingWheel = new cObject();
	var rwl = 225;
	ratingWheel.visible = true;
	ratingWheel.width = rwl;
	ratingWheel.height = rwl; 
	ratingWheel.x = width/2;
	ratingWheel.y = height - 2*rwl/3;
	ratingWheel.draw = (function() {
		context.save();
		context.translate(ratingWheel.x, ratingWheel.y);
		context.rotate(rr);
		context.drawImage(ratingWheelImg, -rwl/2, -rwl/2, 
				ratingWheel.width, ratingWheel.height);
		context.restore();
	}).bind(this);

	var meterImg = new Image();
	meterImg.src = "/images/meter.png";

	var meter = new cObject();
	mw = 300;
	mh = 200;
	meter.visible = true;
	meter.width = mw;
	meter.height = mh;
	meter.x = width/2;
	meter.y = 16+mh/2;
	meter.draw = (function() {
		context.save();
		context.translate(meter.x, meter.y);
		context.drawImage(meterImg, -mw/2, -mh/2,
			meter.width, meter.height);
		context.restore();
	}).bind(this);

	var needleImg = new Image();
	needleImg.src = "/images/needle.png";

	var needle = new cObject();
	nw = 10;
	nh = 100;
	needle.visible = true;
	needle.width = nw;
	needle.height = nh;
	needle.x = width/2;
	needle.y = meter.y + mh/4;
	needle.draw = (function() {
		context.save();
		context.translate(needle.x, needle.y);
		context.rotate(nr);
		context.drawImage(needleImg, -nw/2, -nh+2,
			needle.width, needle.height);
		context.restore();
	}).bind(this);



  $.ajax({
    url: "/songs/get_hotness",
    type: "GET",
    dataType: "text"
  })
  .success(function(response) {
    console.log("get hotness success");
    console.log(response);
    updateRating(response);
  })
  .fail(function(response) {
    console.log("get hotness fail");
    console.log(response);
  })
  ;




	// create indicator array and populate it
	var indicators = new Array(11);
	// the points are from -4*PI/5 - 4*PI/5
	for(var i = 0; i < 11; i++) {
		var radius = rwl * 1.2;
		id = new cObject();
		id.visible = true;
		id.width = 2;
		id.height = 2;
		var angle = (i/10) * 2*Math.PI/(5/4) - Math.PI/(5/4) + Math.PI/2;
		id.x = Math.cos(angle) * radius + ratingWheel.x;
		id.y = Math.sin(angle) * radius + ratingWheel.y;
		id.color = "rgba(0,0,0,1)";
		indicators[i] = id;
	}
	
	// CALLBACK FUNCTIONS

	var rr = 0;	// wheel rotation
	// starts timed draw events
	setInterval((function() {
		context.clearRect(0,0,width,height);	// clear the rectangle first
		context.drawImage(backgroundImg, 0, 0, width, height);
		ratingWheel.draw();
		meter.draw();
		needle.draw();
		for(var i = 0; i < 11; i++) {
			var id = indicators[i];
			context.save();
			context.fillStyle = id.color;
			context.arc(id.x,id.y,id.width*2,0,Math.PI*2,true); // Outer circle  
			context.restore();
		}
	}).bind(this), 1000/30);	// 30 fps

	// touch handlers
	var rating = 0;
	document.addEventListener("touchmove", function(event) {
		// handle one finger touches
		switch(event.targetTouches.length) {
		case 1:
			var touch = event.targetTouches[0];
			// figure out if the touch is within bounds of the rating wheel
			if(ratingWheel.isHovering(touch.pageX+rwl/2, touch.pageY+rwl/2)) {
				// find a new rotation angle		
				var angle = Math.atan((height-rwl+rwl/2 - touch.pageY)/(touch.pageX - width/2)) - Math.PI/2;
				if(touch.pageX - width/2 < 0) {
					angle = angle - Math.PI;
				}
				// find if it's going clockwise or counterclockwise
				if(-1*rr > angle) { // clockwise
					rating = (rating < 100) ? rating+1 : 100;
				} else {
					rating = (rating > 0) ? rating-1 : 0;
				}

                $.ajax({
                  url: "/songs/hotness",
                  type: "POST",
                  data: {hotness : rating},
                  dataType: "text"
                })
                .success(function(response) {
                    console.log("success");
                    console.log(response);
                    })
                .fail(function(response) {
                    console.log("fail");
                    console.log(response);
                    })
                ;

				rr = -1*angle;
			} else {	// if it's not hovering any objects, lets say it's a swipe
				
			}
			break;
		default:
			break;
		}
		// stop the touches from moving the screen
		event.preventDefault();
	}, false);
};

var updateRating = function(rating) {
	if(rating < 0) {
		rating = 0;
	} else if (rating > 100) {
		rating = 100;
	}

	// scale rating from 0 - 100 to -PI/3 - PI/3
	nr = (rating/100) * 2*Math.PI/(5/2) - Math.PI/(5/2);
	console.log("calculated nr = %d", nr);
};

document.body.onload = ratingView;
</script>

<canvas id="paper"></canvas>

<!-- canvas contains everything
<% song = @now_playing_song %>
<% if song == nil %>
  <tr>No songs currently playing</tr>
<% else %>
    <td><%= song.id %></td>
    <td><%= song.name %></td>
    <td><%= song.requests %></td>
    <td><%= song.upvotes %></td>
    <td><%= song.downvotes %></td>
    <td><%= song.playing %></td>
    <td><%= song.hotness %></td>
    <td><%= link_to 'Show', song %></td>
    <td><button id="<%= song.id %>" class="upvote-btn btn success">Upvote</button></td>
    <td><button id="<%= song.id %>" class="downvote-btn btn danger">Downvote</button></td>
    <td><%= link_to 'Edit', edit_song_path(song) %></td>
    <td><%= link_to 'Destroy', song, :confirm => 'Are you sure?', :method => :delete %></td>
  </tr>
<% end %>
</table>
-->
